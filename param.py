#!/usr/bin/env python3
#yang nyopet script semoga yatim kalo udah semoga orang nya aja gpp hehe 99x
#yang mau script nya di encrypt seperti ini chat pribadi saja

import os, sys, base64, zlib
from Crypto.Protocol.KDF import scrypt
from Crypto.Cipher import AES

def decrypt_code(enc, password):
    try:
        raw = base64.b64decode(enc)
        salt2 = raw[:32]
        nonce2 = raw[32:44]
        tag2 = raw[44:60]
        ciphertext2 = raw[60:]
        key2 = scrypt(password, salt2, key_len=32, N=131072, r=8, p=2)
        cipher2 = AES.new(key2, AES.MODE_GCM, nonce=nonce2)
        first_layer = cipher2.decrypt_and_verify(ciphertext2, tag2)
        salt1 = first_layer[:32]
        nonce1 = first_layer[32:44]
        tag1 = first_layer[44:60]
        ciphertext1 = first_layer[60:]
        key1 = scrypt(password, salt1, key_len=32, N=131072, r=8, p=2)
        cipher1 = AES.new(key1, AES.MODE_GCM, nonce=nonce1)
        compressed = cipher1.decrypt_and_verify(ciphertext1, tag1)
        decrypted = zlib.decompress(compressed).decode()
        return decrypted
    except Exception:
        print("Hayoo lohh, lagi ngapain lu di sini hah???.")
        sys.exit(1)

def get_decryption_password():
    if sys.gettrace() is not None or os.getenv("TRAP_MODE") == "1":
        return "decoy_password"
    part1 = "password(ObfusCation_tripel_en"
    part2 = "crypt)-Double Encrypted Edition"
    return part1 + part2

if __name__ == '__main__':
    password = get_decryption_password()
    encrypted_data = ""
    code = decrypt_code(encrypted_data, password)
    exec(code)
