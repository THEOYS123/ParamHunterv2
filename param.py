#!/usr/bin/env python3
#yang nyopet script semoga yatim kalo udah semoga orang nya aja gpp hehe 99x
#yang mau script nya di encrypt seperti ini chat pribadi saja

import os, sys, base64, zlib
from Crypto.Protocol.KDF import scrypt
from Crypto.Cipher import AES

def decrypt_code(enc, password):
    try:
        raw = base64.b64decode(enc)
        salt2 = raw[:32]
        nonce2 = raw[32:44]
        tag2 = raw[44:60]
        ciphertext2 = raw[60:]
        key2 = scrypt(password, salt2, key_len=32, N=131072, r=8, p=2)
        cipher2 = AES.new(key2, AES.MODE_GCM, nonce=nonce2)
        first_layer = cipher2.decrypt_and_verify(ciphertext2, tag2)
        salt1 = first_layer[:32]
        nonce1 = first_layer[32:44]
        tag1 = first_layer[44:60]
        ciphertext1 = first_layer[60:]
        key1 = scrypt(password, salt1, key_len=32, N=131072, r=8, p=2)
        cipher1 = AES.new(key1, AES.MODE_GCM, nonce=nonce1)
        compressed = cipher1.decrypt_and_verify(ciphertext1, tag1)
        decrypted = zlib.decompress(compressed).decode()
        return decrypted
    except Exception:
        print("Hayoo lohh, lagi ngapain lu di sini hah???.")
        sys.exit(1)

def get_decryption_password():
    if sys.gettrace() is not None or os.getenv("TRAP_MODE") == "1":
        return "decoy_password"
    part1 = "password(ObfusCation_tripel_enc"
    part2 = "rypt) - Double Encrypted Edition"
    return part1 + part2

if __name__ == '__main__':
    password = get_decryption_password()
    encrypted_data = "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"
    code = decrypt_code(encrypted_data, password)
    exec(code)
